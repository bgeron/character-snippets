#![warn(rust_2018_idioms)]
#![forbid(unsafe_code)]

use exitfailure::ExitFailure;
use failure::Error;
use failure::ResultExt;
use indexmap::IndexMap;
use serde::{Deserialize, Serialize};
use structopt::StructOpt;

/// Convert a TOML file in a certain format to a Visual Studio Code snippets file.
///
/// This is particularly useful for a file with snippets for Unicode characters.
///
/// The format of the input file should be as follows:
///
///     [Snippets]
///       xbrackets = "〚$1〛"
///       xcheckbox = "☐ "
///       xchecked = "☑ "
///       xcheckmark = "✓"
///       xch = "✓"
///
/// Visual Studio Code will interpret variables such as $1 as placeholders.
///
/// Output will be sent to standard output.
#[derive(Debug, StructOpt)]
#[structopt(verbatim_doc_comment)]
struct Cli {
    /// Skip printing a header with the current date and time.
    #[structopt(long)]
    no_header: bool,

    /// The path to the file to read
    #[structopt(parse(from_os_str))]
    path: std::path::PathBuf,
}

#[derive(Deserialize)]
struct Toml {
    #[serde(rename = "Snippets")]
    snippets: Snippets,
}

type Snippets = IndexMap<String, String>;

struct Snippet {
    name: String,
    value: String,
}

type VsCode = IndexMap<String, VsCodeDetails>;

#[derive(Serialize)]
struct VsCodeDetails {
    prefix: String,
    body: Vec<String>,
}

fn parse_toml(toml: toml::Value) -> Result<Vec<Snippet>, Error> {
    let map = toml
        .try_into::<Toml>()
        .with_context(|_| "unexpected structure in TOML")?
        .snippets;

    Ok(map
        .into_iter()
        .map(|(name, value)| Snippet { name, value })
        .collect::<Vec<Snippet>>())
}

fn gen_vscode_item(snippet: &Snippet) -> (String, VsCodeDetails) {
    (
        format!("Character: {}", snippet.name),
        VsCodeDetails {
            prefix: snippet.name.clone(),
            body: vec![snippet.value.clone()],
        },
    )
}

fn gen_vscode(
    snippets: &[Snippet],
    write_header: bool,
    mut writer: impl std::io::Write,
) -> Result<(), Error> {
    let data = snippets.iter().map(gen_vscode_item).collect::<VsCode>();

    if write_header {
        write!(
            &mut writer,
            "\
            // Visual Studio Code snippets file generated by github/bgeron/character-snippets .\n\
            //\n\
            // Generated on {}. Contains {} snippets.\n\
            \n\n\
        ",
            chrono::Local::now(),
            data.len()
        )?;
    }

    serde_json::to_writer_pretty(&mut writer, &data)?;
    writeln!(&mut writer)?;
    Ok(())
}

fn main() -> Result<(), ExitFailure> {
    let args = Cli::from_args();

    let in_toml_str = std::fs::read_to_string(&args.path)
        .with_context(|_| format!("could not read input file `{}`", &args.path.display()))?;

    let in_toml = toml::from_str(&in_toml_str).with_context(|_| "could not parse TOML")?;

    let snippets = parse_toml(in_toml)?;

    let write_header = !args.no_header;

    gen_vscode(&snippets, write_header, &mut std::io::stdout().lock())?;

    Ok(())
}
